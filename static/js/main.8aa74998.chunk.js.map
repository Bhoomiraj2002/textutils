{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","getWords","split","join","trim","length","heading","placeholder","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","defaultProps","about","Alert","capitalize","word","lower","charAt","slice","alert","msg","App","setmode","setAlert","message","tp","setTimeout","document","body","style","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"2LAIe,SAASA,EAAOC,GAE3B,OACI,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACI,sBAAKD,UAAU,kBAAf,UACA,mBAAGA,UAAU,eAAeE,KAAK,IAAjC,SAAsCH,EAAMI,QAC5C,wBAAQH,UAAU,iBAAiBI,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACI,sBAAMJ,UAAU,0BAEpB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACI,oBAAIL,UAAU,kCAAd,SACA,oBAAIA,UAAU,WAAd,SAEI,mBAAGA,UAAU,kBAAkB,eAAa,OAAOE,KAAK,IAAxD,sBAOJ,sBAAKF,UAAS,sCAA8C,UAAbD,EAAME,KAAe,OAAO,SAA3E,UACI,uBAAOD,UAAU,mBAAmBM,QAASP,EAAMQ,WAAYH,KAAK,WAAWI,KAAK,SAASH,GAAG,2BAChG,uBAAOL,UAAU,mBAAmBS,QAAQ,yBAA5C,kCCxBL,SAASC,EAASX,GAC7B,MAAuBY,mBAAS,IAAhC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAU,WAEZ,OADYF,EAAKG,MAAM,QACRC,KAAK,KAAKC,OAAOF,MAAM,KAAKG,QA8B/C,OACI,qCACA,sBAAKlB,UAAS,yBAAiC,UAAbD,EAAME,KAAe,OAAO,SAA9D,UACI,oBAAID,UAAU,OAAd,SAAsBD,EAAMoB,UAC5B,qBAAKnB,UAAU,OAAf,SACA,0BAAUA,UAAS,4BAAoC,UAAbD,EAAME,KAAe,OAAO,QAAnD,wBAA0EF,EAAME,MAAQmB,YAAY,kBAAkBC,MAAOT,EAC5IU,SAVW,SAACC,GACpBV,EAAQU,EAAMC,OAAOH,QASahB,GAAG,8BAA8BoB,KAAK,QAGpE,wBAAQzB,UAAU,uBAAuBM,QArC3B,WAClB,IAAIoB,EAAUd,EAAKe,cACnBd,EAAQa,GACR3B,EAAM6B,UAAU,0BAA0B,YAkCtC,kCACA,wBAAQ5B,UAAU,uBAAuBM,QAjC3B,WAClB,IAAIoB,EAAUd,EAAKiB,cACnBhB,EAAQa,GACR3B,EAAM6B,UAAU,0BAA0B,YA8BtC,kCACA,wBAAQ5B,UAAU,uBAAuBM,QA7BxB,WACrBO,EAAQ,IACRd,EAAM6B,UAAU,eAAe,YA2B3B,wBACA,wBAAQ5B,UAAU,uBAAuBM,QA1B9B,WAEfwB,UAAUC,UAAUC,UAAUpB,GAC9Bb,EAAM6B,UAAU,cAAc,YAuB1B,uBACA,wBAAQ5B,UAAU,uBAAuBM,QAtBxB,WACrB,IAAIoB,EAAQd,EAAKG,MAAM,QACvBF,EAAQa,EAAQV,KAAK,MACrBjB,EAAM6B,UAAU,sBAAsB,YAmBlC,mCAEJ,sBAAK5B,UAAS,8BAAsC,UAAbD,EAAME,KAAe,OAAO,SAAnE,UACI,mDACA,8BAAIa,IAAJ,cAA2BF,EAAKM,OAAhC,iBACA,8BAAI,KAAMJ,IAAV,mBACA,yCACA,4BAAIF,UDbhBd,EAAOmC,aAAa,CAChB9B,MAAO,iBACP+B,MAAO,SE9BIC,MAbf,SAAepC,GACX,IAAMqC,EAAY,SAACC,GACf,IAAMC,EAAOD,EAAKR,cAClB,OAAOS,EAAMC,OAAO,GAAGZ,cAAeW,EAAME,MAAM,IAEtD,OACIzC,EAAM0C,OAAS,sBAAKzC,UAAS,sBAAiBD,EAAM0C,MAAMrC,KAA7B,gCAAiEI,KAAK,QAApF,UACX,iCAAS4B,EAAWrC,EAAM0C,MAAMrC,QADrB,MACwCgC,EAAWrC,EAAM0C,MAAMC,SC4CvEC,MA5Cf,WACE,MAAwBhC,mBAAS,SAAjC,mBAAOV,EAAP,KAAa2C,EAAb,KACA,EAA0BjC,mBAAS,MAAnC,mBAAO8B,EAAP,KAAcI,EAAd,KAEMjB,EAAY,SAACkB,EAASC,GAE1BF,EAAS,CACPH,IAAKI,EACL1C,KAAM2C,IAERC,YAAW,WACTH,EAAS,QACT,MAeJ,OACE,qCACE,cAAC/C,EAAD,CAAQK,MAAM,YAAYF,KAAMA,EAAMM,WAfvB,WACL,UAATN,GACD2C,EAAQ,QACRK,SAASC,KAAKC,MAAMC,gBAAgB,QACpCxB,EAAU,6BAA8B,aAGxCgB,EAAQ,SACRK,SAASC,KAAKC,MAAMC,gBAAgB,QACpCxB,EAAU,8BAA+B,eAOzC,cAAC,EAAD,CAAOa,MAAOA,IACd,qBAAKzC,UAAU,iBAAf,SAGM,cAACU,EAAD,CAAUS,QAAQ,kCAAkClB,KAAMA,EAAM2B,UAAWA,UC/BxEyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,aAAD,UAEE,cAAC,EAAD,MAEFd,SAASe,eAAe,SAM1BX,K","file":"static/js/main.8aa74998.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n//import { Link,} from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    \r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n            <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li className=\"nav-item\">\r\n                    {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">/Home</Link> */}\r\n                    <a className=\"nav-link active\" aria-current=\"page\" href=\"#\" >Home</a>\r\n                </li>\r\n                {/* <li className=\"nav-item\">\r\n                    { <Link className=\"nav-link\" to=\"/about\">{props.about}</Link> }\r\n                    <a className=\"nav-link\" href=\"/about\">{props.about}</a>\r\n                </li> */}\r\n                </ul>\r\n                <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}> \r\n                    <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n                </div>\r\n                {/* <form className=\"d-flex\">\r\n                <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n                </form> */}\r\n            </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    about: PropTypes.string,\r\n};\r\n\r\nNavbar.defaultProps={\r\n    title: \"set title here\",\r\n    about: \"About\",\r\n};","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText]= useState('');\r\n    const getWords= ()=>{\r\n        let newText=text.split(/[ ]+/);\r\n        return newText.join(\" \").trim().split(\" \").length;\r\n    }\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Upper Case\",\"success\");\r\n    }\r\n    const handleLwClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lower Case\",\"success\");\r\n    }\r\n    const handleclearClick = ()=>{\r\n        setText(\"\");\r\n        props.showAlert(\"Text Cleared\",\"success\");\r\n    }\r\n    const handleCopy = ()=>{\r\n        //text.select();\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert(\"Text Copied\",\"success\");\r\n    }\r\n    const handleExtraSpace = ()=>{\r\n        let newText=text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Removed Extra Space\",\"success\");\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className={`container text-${props.mode==='light'?'dark':'light'}`}>\r\n            <h1 className='my-3'>{props.heading}</h1> \r\n            <div className=\"mb-3\">\r\n            <textarea className={`form-control text-${props.mode==='light'?'dark':'light'} border-0 bg-${props.mode}`} placeholder=\"Enter Text Here\" value={text} \r\n                onChange={handleOnChange} id=\"exampleFormControlTextarea1\" rows=\"8\"\r\n                ></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleLwClick}>convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleclearClick}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpace}>Remove Extra Space</button>\r\n        </div>\r\n        <div className={`container my-3 text-${props.mode==='light'?'dark':'light'}`}>\r\n            <h2>Your Text Summary</h2>\r\n            <p>{getWords()} words and {text.length} charactors</p>\r\n            <p>{0.008*getWords()} Minutes read</p>\r\n            <h2>preview</h2>\r\n            <p>{text}</p>\r\n        </div>\r\n        \r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize =(word)=>{\r\n        const lower= word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() +lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong> : {capitalize(props.alert.msg)}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React, { useState } from 'react';\nimport './App.css';\n//import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n//import { Routes, Route} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setmode] = useState('light');  //whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, tp)=>{\n    \n    setAlert({\n      msg: message,\n      type: tp\n    });\n    setTimeout(()=>{\n      setAlert(null)\n    },2000)\n  }\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setmode('dark');\n      document.body.style.backgroundColor='black';\n      showAlert(\"Dark Mode has been Enabled\", \"success\");\n\n    }else{\n      setmode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light Mode has been Enabled\", \"success\");\n    }\n  }\n\n  return (\n    <>\n      <Navbar title='Textutils' mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n      {/* <Routes>\n          <Route path=\"/\" element={ */}\n            <TextForm heading=\"Enter The Text to analyze below\" mode={mode} showAlert={showAlert}/>\n          {/* } />\n          <Route path=\"about\" element={<About />} />\n      </Routes> */}\n      </div>\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n//import { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <StrictMode>\n  \n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}